generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?              @map("email_verified")
  image                String?
  username             String?
  language             String                 @default("ru")
  progress             Progress[]
  accounts             Account[]
  sessions             Session[]
  sentenceProgress     SentenceProgress[]
  lessons              Lesson[]
  userProgress         UserLessonProgress[]
  UserExerciseProgress UserExerciseProgress[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Topic {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  words Word[]
}

model Word {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  polish          String
  pronunciation   String?
  russian         String[]
  english         String[]
  correctAnswerRu String
  correctAnswerEn String
  imageUrl        String?
  topicId         String     @map("topic_id") @db.ObjectId
  topic           Topic      @relation(fields: [topicId], references: [id])
  Progress        Progress[]
}

model Progress {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @map("user_id") @db.ObjectId
  wordId   String @map("word_id") @db.ObjectId
  attempts Int    @default(0)
  correct  Int    @default(0)
  stage    Int    @default(0) 
  user     User   @relation(fields: [userId], references: [id])
  word     Word   @relation(fields: [wordId], references: [id])

  @@unique([userId, wordId]) // Уникальный составной индекс
}

model DialogSet {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  dialogs Dialog[]
}

model Dialog {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  imagePath String // Путь к изображению, например: "/dialog-sets/witcher/dialog1.jpg"
  setId     String     @map("set_id") @db.ObjectId
  set       DialogSet  @relation(fields: [setId], references: [id])
  sentences Sentence[]
}

model Sentence {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  dialogId String @map("dialog_id") @db.ObjectId
  text     String
  top      String
  left     String
  dialog   Dialog @relation(fields: [dialogId], references: [id])
}

model SentenceProgress {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  sentenceId String   @db.ObjectId
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Lesson {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  order        Int                  @unique
  exercises    LessonExercise[]
  userProgress UserLessonProgress[]
  User         User?                @relation(fields: [userId], references: [id])
  userId       String?              @db.ObjectId
}

model LessonExercise {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId
  lessonId     String                 @db.ObjectId
  lesson       Lesson                 @relation(fields: [lessonId], references: [id])
  textRu       String
  textEn       String
  textPl       String
  words        String[]
  userProgress UserExerciseProgress[]
}

model UserExerciseProgress {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  userId     String         @db.ObjectId
  exerciseId String         @db.ObjectId
  user       User           @relation(fields: [userId], references: [id])
  exercise   LessonExercise @relation(fields: [exerciseId], references: [id])
  attempts   Int            @default(0)
  correct    Int            @default(0)
  completed  Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([userId, exerciseId])
}

model UserLessonProgress {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  lessonId           String  @db.ObjectId
  completed          Boolean @default(false)
  completedExercises Int     @default(0)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson             Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([lessonId])
}
